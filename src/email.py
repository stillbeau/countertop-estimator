import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from urllib.parse import quote

import pandas as pd
import pytz
import streamlit as st


def compose_breakdown_email_body(
    job_name: str,
    selected_branch: str,
    selected_salesperson: str,
    rec: dict,
    costs: dict,
    fab_plant: str,
    selected_thickness: str,
    sq_ft_used: float,
    additional_costs: float,
    subtotal: float,
    gst_amount: float,
    final_total: float,
) -> str:
    def fmt(v):
        return f"${v:,.2f}"

    tz = pytz.timezone("America/Vancouver")
    now = pd.Timestamp.now(tz=tz).strftime("%Y-%m-%d %H:%M:%S %Z")
    job = job_name or "Unnamed Job"

    transfer_button_html = ""
    if rec.get("Location") != fab_plant:
        try:
            to_email = st.secrets["TRANSFER_REQUEST_EMAIL"]
            subject = f"Slab Transfer Request - Job: {job}"
            body = f"""
Please initiate a transfer for the following slab(s):

PO:
JOB LINK:

Job Name: {job}
Material: {rec.get("Full Name", "N/A")}
Serial Number(s): {rec.get("serial_numbers", "N/A")}
FROM (Current Location): {rec.get("Location", "N/A")}
TO (Fabrication Plant): {fab_plant}

Thank you,
{selected_salesperson}
"""
            mailto_link = f"mailto:{to_email}?subject={quote(subject)}&body={quote(body)}"
            transfer_button_html = f"""
<p style="text-align: center; margin-top: 25px;">
  <a href="{mailto_link}" target="_blank" style="background-color: #2563eb; color: white; padding: 12px 20px; text-decoration: none; border-radius: 5px; font-size: 16px;">
    Request Slab Transfer
  </a>
</p>
<p style="text-align: center; font-size: 12px; color: #666;">
  (Material is at a different location from the fabrication plant)
</p>
"""
        except KeyError:
            transfer_button_html = "<p style='color: red; text-align: center;'>Could not create transfer button: 'TRANSFER_REQUEST_EMAIL' secret is missing.</p>"

    return f"""<html>
<head><style>
  body {{ font-family: Arial, sans-serif; color: #333; }}
  .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
  h1 {{ color: #0056b3; margin-bottom: 4px; }}
  p.meta {{ margin: 0; font-size: 0.9rem; color: #555; }}
  h2 {{ color: #0056b3; border-bottom: 1px solid #eee; padding-bottom: 5px; margin-top: 20px; }}
  table {{ width: 100%; border-collapse: collapse; margin: 10px 0; }}
  th, td {{ padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }}
  th {{ background: #f0f0f0; }}
  .grand-total-row td {{ font-weight: bold; background: #c9e0ff; font-size: 1rem; }}
  .footer {{ font-size: 10px; color: #666; text-align: center; margin-top: 20px; }}
</style></head>
<body>
  <div class="container">
    <h1>CounterPro Estimate</h1>
    <p class="meta">
      <strong>Branch:</strong> {selected_branch} &nbsp;&nbsp;
      <strong>Salesperson:</strong> {selected_salesperson}
    </p>

    <h2>Project &amp; Material Overview</h2>
    <table>
      <tr><th>Detail</th><th>Value</th></tr>
      <tr><td>Job Name:</td><td>{job}</td></tr>
      <tr><td>Slab Selected:</td><td>{rec.get("Full Name", "N/A")}</td></tr>
      <tr><td>Material Source:</td><td>{rec.get("Location", "N/A")}</td></tr>
      <tr><td>Fabrication Plant:</td><td>{fab_plant}</td></tr>
      <tr><td>Thickness:</td><td>{selected_thickness}</td></tr>
      <tr><td>Sq Ft (for pricing):</td><td>{sq_ft_used} sq.ft</td></tr>
      <tr><td>Slab Sq Ft (Total):</td><td>{rec.get("available_sq_ft", 0):.2f} sq.ft</td></tr>
      <tr><td>Unique Slabs:</td><td>{rec.get("slab_count", 0)}</td></tr>
      <tr><td>Serial Numbers:</td><td>{rec.get("serial_numbers", "N/A")}</td></tr>
    </table>

    <h2>Cost Components</h2>
    <table>
      <tr><th>Component</th><th>Amount</th></tr>
      <tr><td>Material &amp; Fabrication:</td><td>{fmt(costs["base_material_and_fab_component"])} </td></tr>
      <tr><td>Installation:</td><td>{fmt(costs["base_install_cost_component"])} </td></tr>
      <tr><td>IB Cost (Internal):</td><td>{fmt(costs["ib_cost_component"])} </td></tr>
    </table>

    <h2>Totals</h2>
    <table>
      <tr><th>Description</th><th>Amount</th></tr>
      <tr><td>Base Estimate:</td><td>{fmt(costs["total_customer_facing_base_cost"])} </td></tr>
      <tr><td>Additional Costs (sinks, tile, plumbing):</td><td>{fmt(additional_costs)} </td></tr>
      <tr><td>Subtotal:</td><td>{fmt(subtotal)} </td></tr>
      <tr><td>GST (5%):</td><td>{fmt(gst_amount)} </td></tr>
      <tr class="grand-total-row"><td>Final Total:</td><td>{fmt(final_total)} </td></tr>
    </table>

    {transfer_button_html}

    <div class="footer">Generated by CounterPro on {now}</div>
  </div>
</body>
</html>"""


def send_email(subject: str, body: str, to_email: str):
    try:
        msg = MIMEMultipart("alternative")
        msg["Subject"] = subject
        msg["From"] = st.secrets["SENDER_FROM_EMAIL"]
        msg["To"] = to_email
        msg.attach(MIMEText(body, "html"))

        recipients = [to_email]
        cc = st.secrets.get("QUOTE_TRACKING_CC_EMAIL")
        if cc:
            msg["Cc"] = cc
            recipients.append(cc)

        with smtplib.SMTP(
            st.secrets["SMTP_SERVER"],
            st.secrets["SMTP_PORT"],
        ) as server:
            server.starttls()
            server.login(
                st.secrets["EMAIL_USER"],
                st.secrets["EMAIL_PASSWORD"],
            )
            server.sendmail(msg["From"], recipients, msg.as_string())

        st.success("âœ… Quote emailed successfully.")
    except Exception as e:
        st.error(f"Email failed: {e}")
